fasta_text = """>Rosalind_8193
TTCTCAGATTACATACCCTAGCAAACCGCCTCTCGTTGTACACCGTGCTGTGTGACGCCG
TTTTCGAGGATTTAACTTAGTAACACGACTATTCATGAAAGCCGACCTGAAGGCCCGAAT
CTATTGACTGGGGATGTTCCGATCTGGGCTATAACCCAAATACTCTGACACTTTGTTCTC
CTAAGGACTCCGGTATTAGGGTACACCGCTAACATTGCGGCCGCGCATCTATTTCGGACA
ATAGAAGATTCTGGTTGTGTTCCGCAGATTAAATGAGATTCGGTAAGCGCTTCTACATCG
GCATCTATAGTTGAATCACGCCAGGTTCTGAGTTAATTAATAATAGTATAGCTTTATTCT
CTAGATGACGCAGGCAGTATTTTTGTTTGGTAGGGCTCCAGGCGGTCCGAGATGGCTGTA
ATTCACCCAATATCCAACATCGGGGAGGCCAAGCGCTATCTGTATGCTTGGGAGTACCGC
AGCGACGATCTTTCAAACCGTAGGTAACGACGGCTGGTTATAGCGATAGTCTCCACCCAG
CCTTCTAGCCGCACAGATAAGTGAATTGTTGTGTCTGTTCGGTTGTCATTGTGTAACGAT
TCCTAGGCTTCGGGCTGACCCACAAGGCAACGGAGACCCTCTCTCGAAAAGAGCTATACT
GCACTGGTTCTCTAGTGGAACGTCGTCGGCATGGGTCCAGCAGCGGAACGTTGAATTGAG
GAACCAGTTCCAGCTACCTTCCCGGACCCCCTGAGATTGGCCAGAGCATCCTATTTGCCA
GGGCGGATATACCTCCAAGTAGACATTTTTGCCCAGTGGATATGATTATGGTGATACACA
GACATCAGTTTCGTCATGAGCGACACCG
>Rosalind_5946
CGGCACTACTGGTGCTCTTCGTGGACCCGGCAAGCGTAGCGGACATGCCACGGCCCGTAA
TGCTTCATACGCCCACACCATGACGAACTGCGCTAAGCGCCGCTTCACTTTACATGTACT
AGAGGCCGTTGCTAACAGACAATAGAGAGGAGCTTATTATTCCTAAGCTTTTAGTTTGCG
CGACCCTCATACCAACCCGTATGTTACTAAGGTACTATGAAACAGCTTGTGACATGACTA
CCTCACTATAACACAGCTAGGACGCTAATGTTAAACGGCACGACTAACTCATTCACTACC
AGAGTGCACACAATTACCCTCTGCGGACGAGCGGCAGGGGATGCGCCTTGTCTTACGCTA
CCGAGGCCGACCGATCGATTTTAGCATTGATTGCCAGGCAAATTATAACACTCGGAGAAT
CACTTACAATCGGCCTTGTCGCGAGTAAATGATACTAATCCAACAGAGAGAAGACGGTAA
CTGGGCCCTAGGAACGGCTAGGCGAGAATGACCCTGACGCATTTCTCGAATCTCCCAGAG
CCCGAGGAACAGGGGGAAATGAAAGACTTCGATCCAAATCTGATGGCCACCATTCGCCAG
AGAAGACTACTTACGACGTACACTGTCATAGAGGAGGTTCTTTTAACCAGGGCTGGATAG
TATCCACGTGCGGGACTTACAACGTCAATCAGTGCATGGGACCCGCTTAACGCAGGTCGG
AATCCTGGGGACTTAAACTCATGCTACCGGCGGCTAAAGAACCCGAACACAATTAAAAGA
AAATAGCTGAGCAGCCATCACAAA
>Rosalind_7188
CACAGCGCTATGGCTCCTGGACTTCGAGAACCCAGATGCGTCTAGTACAAGGATGAGCTG
CTTTTCTGTACGGCCTCGACTTCCTCTCTAGTCTGGCTGAGCCGAATGAACTCAACTGGA
GTAAGTCCGTTGCTCCCGTCCACTAAAAGGGACTAGTAAGTGAGCTTGCCCAAGTCGAGT
TTTAAGTACCGGCAGCTCACGCCTAGAACGATACTAGTGGTCTTCGCAAGTCCTCGGTCT
CTGCGGGTGGCGTGGCTATCTAGTCGAACACTAGCCTAAAACTTGATACTCACACCATAG
AACTGCGTCCGTCCACGACAATTTCGACCTGGTGGTTCCGTCGCATGAGTATGCAAGAAT
CGGCGGTCGCGATCCGCGCACAGGTGGTCCGGTTATACCTCCATCGTTCCCCGCGTCGGC
CACCGTAGGTGGGGCACATTCTCAACGGGCTCTAGTTACTGGCCAGGTCATAGGTGTGGC
TAAGTATACCTCCTCACGAGAGCGGCAAGGAAATTGGTCATTGCGTGGTTTTGTAGGGTC
GGTCACTGGCGCGACTCGGTGCATGATGTCGAGATAGGGCTAAATGATTAAACAGGGCTT
GCTACGCCGAGCGCCAACGCTTATCAATCGAAGTCATCAGGTTAATCCAAGTATGCTTGT
ATCCTCTCTGCGGCCACGGGATTTTATCAAACATAAATGAGAACTCTCCTTGTAATTTGC
TTACTAGGTTCTTCCCTAAACTGCGTGCAGGAACGCCAATGTGGTTCAGAGCTCATAAGA
AGTATTAGAATACAAATTAAAACGGCTTGAGTCACGCTTGTTTAAATAGCTTATACAATT
CGTACTTCTGTACGCGATCATTCGGCCCCTAAAACTTGAAGCAAAGTAGATGACGACAGA
AACTCGTAGCA
>Rosalind_2790
TTACGGAGACTGCGCGCTCTAGCGCTTACTCTCCAGTTCAGAAGCGCCATCAACAACCAG
CGCACAATCCCTTTAGAGGCGCCGGTAGATTCCTCTGATCTTCAAGACCGAGAAGTCTCA
TGGCTGACATACCTTGTCGTAAGCATAATAATAGCACAGCGCTATCCACCTCGTAATAGC
AGGCGGTAGATCACAAGGAGGCCACGCGGATATCAATACTTCAGCTTCACGTCTACAGAA
AGCCGCCCTCTCATGATTTATCACCTGAAAGATGGCGTTCATTTTGTCTGCTTCCTATAG
CCCATATACCTGTGGGAAAACTGACTACCCGACGCCCTTTGACGGGCATTAATGCAGATC
ATTGATACAGCCGAGAGATCACAATTTTTCGTGGACGCAACGCAGCCAGATTGATTGTAT
TGGTATATAATGGAGCTGGATACGGATTCAAATTATGAGTTTACATTTGGTACAAGCTAC
GAGCCCTGCTCTTATCAACCACAAGGATGGGGCTGTAGCTCGCTGTTTAGGGCTTCCAAG
CAGACGAAATAGCGGAAAGACTCCCTACTACGAGTAATGCTCTGCGCGGTAAAATAGGGG
TTCCCAGCCGGTCTGGTATATCAATTCACGCAATATTGTGAGCGCACCGACACCTTTGCG
CTCGGGTTCAGGCAGCCATCTCGGCCTGTCGTGTCTGATAAATTTATTTAGTAGTACGAC
CTAACCAATAAATTTGTACCAAGCTTCTACAAGCGCCAAGAGAAGAGGCTGGCCGTAGAA
TATCCTTTCTCAAGGAGATTGTTATATAGATTCCT
>Rosalind_7812
TAAATCTGTTGGAGCAAGTACAACCCTTAAACGAGCCCCCTCCGCCAGTTATCATTAAAC
GGCTGGTCTAATACCGATCACAGGGGCGTCTTTATTTAGCGGCTAACCGTCGCGGAATGA
GTAAGGCGTTATTCCTCGATACTCGAGCATTGGCTCGAAAACTTGCTATTCTTTTCGGTC
CCTGGCTGACAATAGAGATAGAAGGTGGTCTCTACGAGCTCTAATGTAATCCTTGCTCAT
ACTACGGCATGACTCCGAGTAAAAGGGGCTGGCACCCCTTCTATTCTTCAGTAAGCGTGT
TTTACATTAGGGTCATGACGGTTTGTGCTGCGTAGACGATCTCTTGTCAAAACGGTTCTA
GAGCGGTATAAGACGGGTAATCGCACAGGACACGTGCCGAACTGGTACGTTTAGAGACTG
TATTTTACAGCTAAATAGACGGCCTGATCTTCCGTAATAGGGTATGAATACTCGTCTCTG
ATGGCGTCGTAGTCGTTCAACGTGGAGCGTTAACACTGCTTAACGCGCAGCAGTAGTTCT
GACCCTCCTAGCTAATGATCCAGTACCCCGGTTCTACACTTGTGACCAGAAGGCCAATTC
ATGACCAGACTAGACACTTACCGTGCGCACGGGGAGACCACGGTGATCTCCTTCGAACGT
CGCGATGACCACCGTGCAGGGCTGAACCGCCCCTTTATAAGATCGCAACAACTTTGTATC
CAAGGAACCTTAGGGGTGCTAGCTAAATTGTTTCAAAGCTTACGCTAGTACCCGGATTAC
TAATACACAAGCGTAATATCAGAACCTCCAGCTTTGTGCCAGGCGCTGCAGTAAGTCCCT
AACCGGGAATACGGAACATTCCGGTTGCAGAATTATCACTGACAATAAGCCGCTTGGGAA
GACTTTATCCTGGCGGCGTAATAACGACGCGTACACTAGGCTTTCTTAGGGTCTCCACGT
GTCCTAATCAGGGCGCTATGACGTCCTTTATA
"""

# removing the spaces from the text

text = ""

for i in fasta_text:
    if i != "\n":
        text += i


# sorting the sequence and the matching id's

def sortingSeq(string):

    # variables
    sequences = []
    num_seq = 0
    new_sequence = ""


    # sorting the fasta text 
    for line in text.split(">"):
        line = line.strip()

        if line.startswith("R"):
            new_sequence = line 
            sequences.append(line)
            new_sequence = ""
            num_seq += 1
    
    return sequences



    
# couting the nucleotides and calculating the gc content

def countingGC(list):

    # variables
    id_seq = ""
    gc_count = 0
    at_count = 0
    gc_content = 0
    dic = {}
    id = 0


    while id < len(sortedSeq):
        
        # counting the gc content of a sequence
        for i in sortedSeq[id]:

            if i == "C" or i == "G":
                gc_count += 1
            
            elif i =="A" or i =="T":
                at_count += 1

            else:
                id_seq += i
        

        # calculating the gc content of the sequence
        gc_content = gc_count / (gc_count + at_count)
        dic[id_seq] = gc_content

        # reset the values for next sequence
        id_seq = ""
        gc_count = 0
        at_count = 0
        gc_content = 0

        # next sequence in sortedSeq list
        id += 1


    print(dic)

    return dic




def highestGC(dictionary):

    # finding max value
    max_value = max(dictionary.values())

    # save key of the max value
    target_value = max_value
    key = next((key for key, value in dictionary.items() if value == target_value), None)

    # calculating max value in procentual form with 6 decimals
    max_value = max_value * 100
    max_value = round(max_value, 6)


    print(f'The highest GC content has this Sequence: {key}')
    print(f'Max Value is: {max_value}')


    return key, max_value






sortedSeq = sortingSeq(text)

dic = countingGC(sortedSeq)

highestGC(dic)
